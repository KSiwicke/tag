[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 tag authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/my-vignette.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"tag","text":"tag package can installed github : Load tag package: can estimate diffusion coefficients maximum likelihood estimation. est_1d function returns negative log likelihood. Need sort likelihood ‘jagged’, perhaps something resolution changing map units? Also, log transforming D, estimate appears localized minimum, try make profile, says model actually converge found better solution line log transformed version… first example uses single D, longer uses raster still uses imager package convolve. version removed raster imager packages, mainly using terra package. One main difference land layer passed SpatRaster. One nice feature version transposing going raster matrix/array like .","code":"# install.packages(\"devtools\") # devtools::install_github(\"KSiwicke/tag\") # library(tag) # bathy <- tag::cod_ex[[1]] # stars::st_dimensions(bathy)$x$delta # resolution in x direction # stars::st_dimensions(bathy)$y$delta # resolution in y direction # h <- stars::st_dimensions(bathy)$x$delta # land <- bathy %>% #   dplyr::mutate(depth = ifelse(depth < 15, 0, 1)) # 15-m cutoff, but can change as needed # fish_data <- tag::cod_ex[[3]] # L <- tag::cod_ex[[4]] # tag::est_1d(log_D = log(90), h = h, L = L, land = t(land$depth)) # example, returns the negative log likelihood  #  # Params <- list(log_D = log(90)) # Data <- list(h = h, L = L, land = t(land$depth)) # est_1D <- mle2(est_1d,  #                start = Params,  #                data = Data,  #                method = \"Brent\",  #                optimizer = \"optim\", #                lower = log(1), #                upper = log(300)) # need to choose upper and lower boundaries # prof <- profile(est_1D) knitr::include_graphics(\"d_prof.png\") # tictoc::tic() # smooth <- tag::fwd_bck(D = 94, h = h, L = L, land = t(land$depth), fish_data = fish_data) # tictoc::toc() #  # sm_ras <- terra::rast(smooth) # par(mfrow = c(4,1)) # terra::plot(sm_ras[[20]]) # terra::plot(sm_ras[[40]]) # terra::plot(sm_ras[[60]]) # terra::plot(sm_ras[[80]]) # bathy <- terra::rast(cod_ex[[1]]) # load bathymetry as a stars object, but convert to terra raster # names(bathy) <- \"depth\" # h <- terra::res(bathy)[1] # resolution in meters  # identify land as a 0 # land2 <- bathy %>%   # tidyterra::mutate(depth = ifelse(depth < 15, 0, 1)) %>%    # tidyterra::select(depth) # 15-m cutoff, but can change as needed  # tictoc::tic() # smooth2 <- tag::fwd_bck_terra(D = 94, h = h, L = L, land = land2, fish_data = fish_data) # tictoc::toc() #  # sm_ras2 <- terra::rast(smooth2) # par(mfrow = c(4,2)) # terra::plot(sm_ras[[20]]) # terra::plot(sm_ras2[[20]]) # terra::plot(sm_ras[[40]]) # terra::plot(sm_ras2[[40]]) # terra::plot(sm_ras[[60]]) # terra::plot(sm_ras2[[60]]) # terra::plot(sm_ras[[80]]) # terra::plot(sm_ras2[[80]]) # err_gr <- tag::err_grid(smooth = smooth, fish_data = fish_data) #  # err.grid.99 <- err_gr[names(err_gr) == \"q99\"] #  # err.grid.50 <- err_gr[names(err_gr) == \"q50\"]  #Need to make list into one data frame with multiple polygons # polygons.99 <- err.grid.99[[1]] # for(i in 2:length(err.grid.99)) { #   polygons.99 <- rbind(polygons.99, err.grid.99[[i]]) # } #  # polygons.50 <- err.grid.50[[1]] # for(i in 2:length(err.grid.50)) { #   polygons.50 <- rbind(polygons.50, err.grid.50[[i]]) # } #  # terra::plot(bathy) # plot(polygons.99 %>% tidyterra::filter(lyr.1 == 1), col = \"gray\", border = \"gray\", add = TRUE) # plot(polygons.50 %>% tidyterra::filter(lyr.1 == 1), col = \"blue\", border = \"blue\", add = TRUE) # plot(land2 %>% tidyterra::filter(depth == 0), col = \"gray10\", add = TRUE)"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kevin Siwicke. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Siwicke K (2023). tag: Runs Hidden Markov Model Electronic Tag Derived Likelihood. https://github.com/KSiwicke/tag, https://ksiwicke.github.io/tag/.","code":"@Manual{,   title = {tag: Runs Hidden Markov Model for Electronic Tag Derived Likelihood},   author = {Kevin Siwicke},   year = {2023},   note = {https://github.com/KSiwicke/tag, https://ksiwicke.github.io/tag/}, }"},{"path":"/index.html","id":"tag","dir":"","previous_headings":"","what":"Runs Hidden Markov Model for Electronic Tag Derived Likelihood","title":"Runs Hidden Markov Model for Electronic Tag Derived Likelihood","text":"goal tag assist analyzing electronic tag data fish Alaska.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Runs Hidden Markov Model for Electronic Tag Derived Likelihood","text":"tag package can installed github : Load tag package:","code":"# install.packages(\"devtools\") devtools::install_github(\"KSiwicke/tag\") library(tag)"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Runs Hidden Markov Model for Electronic Tag Derived Likelihood","text":"Need add link vignette…","code":""},{"path":"/reference/cod_ex.html","id":null,"dir":"Reference","previous_headings":"","what":"Data to demonstrate Hidden Markov Model of a Pacific Cod — cod_ex","title":"Data to demonstrate Hidden Markov Model of a Pacific Cod — cod_ex","text":"Data sufficient replicate features application Hidden Markov model Aleutian Islands Pacific cod","code":""},{"path":"/reference/cod_ex.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data to demonstrate Hidden Markov Model of a Pacific Cod — cod_ex","text":"bathy Stars object containing bathymetry L Stars object containing daily likelihoods","code":""},{"path":"/reference/conv_kern.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a convolution kernel — conv_kern","title":"Create a convolution kernel — conv_kern","text":"function creates convolution kernel applying filter array/matrix spatialfil package available anymore, need load function manually","code":""},{"path":"/reference/conv_kern.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a convolution kernel — conv_kern","text":"","code":"conv_kern(   sigma = 1.4,   k = c(\"gaussian\", \"LoG\", \"sharpen\", \"laplacian\", \"emboss\", \"sobel\") )"},{"path":"/reference/conv_kern.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a convolution kernel — conv_kern","text":"sigma numeric value standard deviation Gaussian LoG filter k character value: \"gaussian\" Gaussian kernel, \"LoG\" Laplacian Gaussian kernel, \"sharpen\" 3x3 convolution matrix sharpening edges, \"laplacian\" 3x3 convolution matrix.","code":""},{"path":"/reference/conv_kern.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a convolution kernel — conv_kern","text":"numeric convolution matrix","code":""},{"path":"/reference/conv_kern.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a convolution kernel — conv_kern","text":"","code":"# Not run: # creates a convolution kernel with Gaussian function and sigma = 1.4 K <- conv_kern(sigma = 1.4, k = 'gaussian') raster::image(K$matrix)"},{"path":"/reference/err_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Make error grid for smoothed probability of location — err_grid","title":"Make error grid for smoothed probability of location — err_grid","text":"Make error grid smoothed probability location","code":""},{"path":"/reference/err_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make error grid for smoothed probability of location — err_grid","text":"","code":"err_grid(smooth = smooth, fish_data = fish_data)"},{"path":"/reference/err_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make error grid for smoothed probability of location — err_grid","text":"smooth smoothed daily output forward backward filter fish_data Data individual fish, used multiple movement states (mvst)","code":""},{"path":"/reference/err_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make error grid for smoothed probability of location — err_grid","text":"list daily error grids","code":""},{"path":"/reference/err_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make error grid for smoothed probability of location — err_grid","text":"","code":"h <- 1000 # 1 km resolution set.seed(43516) bathy <- matrix(rnorm(100, 50, 30), nrow = 10) land <- ifelse(bathy > 0, 1, 0) L <- array(0, dim = c(dim(bathy), 2)) L[5, 5, 1] <- 1 L[6, 6, 2] <- 1 fish_data <- data.frame(\"mvmt\" = c(1, 1)) fwd_bck(D = 10, h = h, L = L, land = land, fish_data = fish_data) #> , , 1 #>  #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    0    0    0    0    0    0    0    0    0     0 #>  [2,]    0    0    0    0    0    0    0    0    0     0 #>  [3,]    0    0    0    0    0    0    0    0    0     0 #>  [4,]    0    0    0    0    0    0    0    0    0     0 #>  [5,]    0    0    0    0    1    0    0    0    0     0 #>  [6,]    0    0    0    0    0    0    0    0    0     0 #>  [7,]    0    0    0    0    0    0    0    0    0     0 #>  [8,]    0    0    0    0    0    0    0    0    0     0 #>  [9,]    0    0    0    0    0    0    0    0    0     0 #> [10,]    0    0    0    0    0    0    0    0    0     0 #>  #> , , 2 #>  #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    0    0    0    0    0    0    0    0    0     0 #>  [2,]    0    0    0    0    0    0    0    0    0     0 #>  [3,]    0    0    0    0    0    0    0    0    0     0 #>  [4,]    0    0    0    0    0    0    0    0    0     0 #>  [5,]    0    0    0    0    0    0    0    0    0     0 #>  [6,]    0    0    0    0    0    1    0    0    0     0 #>  [7,]    0    0    0    0    0    0    0    0    0     0 #>  [8,]    0    0    0    0    0    0    0    0    0     0 #>  [9,]    0    0    0    0    0    0    0    0    0     0 #> [10,]    0    0    0    0    0    0    0    0    0     0 #>"},{"path":"/reference/est_1d.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate 1 diffusion coefficient — est_1d","title":"Estimate 1 diffusion coefficient — est_1d","text":"Provides negative log likelihood used estimating diffusion coefficient","code":""},{"path":"/reference/est_1d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate 1 diffusion coefficient — est_1d","text":"","code":"est_1d(log_D = log(D), h = h, L = L, land = land)"},{"path":"/reference/est_1d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate 1 diffusion coefficient — est_1d","text":"log_D log diffusion coefficient h Resolution, length side meters L Likelihood fish space indexed time land Raster land probability land can set zero step","code":""},{"path":"/reference/est_1d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate 1 diffusion coefficient — est_1d","text":"numeric value negative log likelihood","code":""},{"path":"/reference/est_1d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate 1 diffusion coefficient — est_1d","text":"","code":"h <- 1000 # 1 km resolution set.seed(43516) bathy <- matrix(rnorm(100, 50, 30), nrow = 10) land <- ifelse(bathy > 0, 1, 0) L <- array(0, dim = c(dim(bathy), 2)) L[5, 5, 1] <- 1 L[6, 6, 2] <- 1 est_1d(log_D = log(10), h = h, L = L, land = land) #> [1] 4.883609"},{"path":"/reference/fwd_bck.html","id":null,"dir":"Reference","previous_headings":"","what":"Forward filter for 1- or 2-state movement to estimate diffusion. — fwd_bck","title":"Forward filter for 1- or 2-state movement to estimate diffusion. — fwd_bck","text":"Forward filter 1- 2-state movement estimate diffusion.","code":""},{"path":"/reference/fwd_bck.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forward filter for 1- or 2-state movement to estimate diffusion. — fwd_bck","text":"","code":"fwd_bck(D = D, h = h, L = L, fish_data = fish_data, land = land)"},{"path":"/reference/fwd_bck.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forward filter for 1- or 2-state movement to estimate diffusion. — fwd_bck","text":"D Diffusion coefficient 1 2 movement states, can preselected estimated h Resolution, length side meters L Likelihood fish space indexed time fish_data Data individual fish, used multiple movement states (mvst) land Raster land probability land can set zero step","code":""},{"path":"/reference/fwd_bck.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forward filter for 1- or 2-state movement to estimate diffusion. — fwd_bck","text":"numeric negaitve-log-likelihood value.","code":""},{"path":"/reference/fwd_bck.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forward filter for 1- or 2-state movement to estimate diffusion. — fwd_bck","text":"","code":"h <- 1000 # 1 km resolution set.seed(43516) bathy <- matrix(rnorm(100, 50, 30), nrow = 10) land <- ifelse(bathy > 0, 1, 0) L <- array(0, dim = c(dim(bathy), 2)) L[5, 5, 1] <- 1 L[6, 6, 2] <- 1 fish_data <- data.frame(\"mvmt\" = c(1, 1)) fwd_bck(D = 10, h = h, L = L, land = land, fish_data = fish_data) #> , , 1 #>  #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    0    0    0    0    0    0    0    0    0     0 #>  [2,]    0    0    0    0    0    0    0    0    0     0 #>  [3,]    0    0    0    0    0    0    0    0    0     0 #>  [4,]    0    0    0    0    0    0    0    0    0     0 #>  [5,]    0    0    0    0    1    0    0    0    0     0 #>  [6,]    0    0    0    0    0    0    0    0    0     0 #>  [7,]    0    0    0    0    0    0    0    0    0     0 #>  [8,]    0    0    0    0    0    0    0    0    0     0 #>  [9,]    0    0    0    0    0    0    0    0    0     0 #> [10,]    0    0    0    0    0    0    0    0    0     0 #>  #> , , 2 #>  #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    0    0    0    0    0    0    0    0    0     0 #>  [2,]    0    0    0    0    0    0    0    0    0     0 #>  [3,]    0    0    0    0    0    0    0    0    0     0 #>  [4,]    0    0    0    0    0    0    0    0    0     0 #>  [5,]    0    0    0    0    0    0    0    0    0     0 #>  [6,]    0    0    0    0    0    1    0    0    0     0 #>  [7,]    0    0    0    0    0    0    0    0    0     0 #>  [8,]    0    0    0    0    0    0    0    0    0     0 #>  [9,]    0    0    0    0    0    0    0    0    0     0 #> [10,]    0    0    0    0    0    0    0    0    0     0 #>"},{"path":"/reference/fwd_bck_terra.html","id":null,"dir":"Reference","previous_headings":"","what":"Forward filter for 1- or 2-state movement to estimate diffusion. — fwd_bck_terra","title":"Forward filter for 1- or 2-state movement to estimate diffusion. — fwd_bck_terra","text":"Forward filter 1- 2-state movement estimate diffusion.","code":""},{"path":"/reference/fwd_bck_terra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forward filter for 1- or 2-state movement to estimate diffusion. — fwd_bck_terra","text":"","code":"fwd_bck_terra(D = D, h = h, L = L, fish_data = fish_data, land = land)"},{"path":"/reference/fwd_bck_terra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forward filter for 1- or 2-state movement to estimate diffusion. — fwd_bck_terra","text":"D Diffusion coefficient 1 2 movement states, can preselected estimated h Resolution, length side meters L Likelihood fish space indexed time fish_data Data individual fish, used multiple movement states (mvst) land Raster land probability land can set zero step","code":""},{"path":"/reference/fwd_bck_terra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forward filter for 1- or 2-state movement to estimate diffusion. — fwd_bck_terra","text":"numeric negaitve-log-likelihood value.","code":""},{"path":"/reference/fwd_bck_terra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forward filter for 1- or 2-state movement to estimate diffusion. — fwd_bck_terra","text":"","code":"h <- 1000 # 1 km resolution set.seed(43516) bathy <- matrix(rnorm(100, 50, 30), nrow = 10) land <- ifelse(bathy > 0, 1, 0) L <- array(0, dim = c(dim(bathy), 2)) L[5, 5, 1] <- 1 L[6, 6, 2] <- 1 fish_data <- data.frame(\"mvmt\" = c(1, 1)) fwd_bck(D = 10, h = h, L = L, land = land, fish_data = fish_data) #> , , 1 #>  #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    0    0    0    0    0    0    0    0    0     0 #>  [2,]    0    0    0    0    0    0    0    0    0     0 #>  [3,]    0    0    0    0    0    0    0    0    0     0 #>  [4,]    0    0    0    0    0    0    0    0    0     0 #>  [5,]    0    0    0    0    1    0    0    0    0     0 #>  [6,]    0    0    0    0    0    0    0    0    0     0 #>  [7,]    0    0    0    0    0    0    0    0    0     0 #>  [8,]    0    0    0    0    0    0    0    0    0     0 #>  [9,]    0    0    0    0    0    0    0    0    0     0 #> [10,]    0    0    0    0    0    0    0    0    0     0 #>  #> , , 2 #>  #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    0    0    0    0    0    0    0    0    0     0 #>  [2,]    0    0    0    0    0    0    0    0    0     0 #>  [3,]    0    0    0    0    0    0    0    0    0     0 #>  [4,]    0    0    0    0    0    0    0    0    0     0 #>  [5,]    0    0    0    0    0    0    0    0    0     0 #>  [6,]    0    0    0    0    0    1    0    0    0     0 #>  [7,]    0    0    0    0    0    0    0    0    0     0 #>  [8,]    0    0    0    0    0    0    0    0    0     0 #>  [9,]    0    0    0    0    0    0    0    0    0     0 #> [10,]    0    0    0    0    0    0    0    0    0     0 #>"},{"path":"/reference/getAEA.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert from latitude/longitude to Albers Equal Area, same as Aleutians map (bathy.ai) — getAEA","title":"Convert from latitude/longitude to Albers Equal Area, same as Aleutians map (bathy.ai) — getAEA","text":"Provides negative log likelihood used estimating diffusion coefficient","code":""},{"path":"/reference/getAEA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert from latitude/longitude to Albers Equal Area, same as Aleutians map (bathy.ai) — getAEA","text":"","code":"getAEA(lon, lat)"},{"path":"/reference/getAEA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert from latitude/longitude to Albers Equal Area, same as Aleutians map (bathy.ai) — getAEA","text":"lon longitude lat latitude","code":""},{"path":"/reference/getAEA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert from latitude/longitude to Albers Equal Area, same as Aleutians map (bathy.ai) — getAEA","text":"x y coordinates Albers Equal Area names 'X' 'Y","code":""},{"path":"/reference/nll_w_sm.html","id":null,"dir":"Reference","previous_headings":"","what":"Forward filter for 1- or 2-state movement to estimate diffusion. — nll_w_sm","title":"Forward filter for 1- or 2-state movement to estimate diffusion. — nll_w_sm","text":"Forward filter 1- 2-state movement estimate diffusion.","code":""},{"path":"/reference/nll_w_sm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forward filter for 1- or 2-state movement to estimate diffusion. — nll_w_sm","text":"","code":"nll_w_sm(log_D = log(D), h = h, L = L, fish_data = fish_data, land = land)"},{"path":"/reference/nll_w_sm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forward filter for 1- or 2-state movement to estimate diffusion. — nll_w_sm","text":"h Resolution, length side meters L Likelihood fish space indexed time fish_data Data individual fish, used multiple movement states (mvst) land Raster land probability land can set zero step D Diffusion coefficient 1 2 movement states, can preselected estimated","code":""},{"path":"/reference/nll_w_sm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forward filter for 1- or 2-state movement to estimate diffusion. — nll_w_sm","text":"numeric negaitve-log-likelihood value.","code":""},{"path":"/reference/nll_w_sm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forward filter for 1- or 2-state movement to estimate diffusion. — nll_w_sm","text":"","code":"h <- 1000 # 1 km resolution set.seed(43516) bathy <- matrix(rnorm(100, 50, 30), nrow = 10) land <- ifelse(bathy > 0, 1, 0) L <- array(0, dim = c(dim(bathy), 2)) L[5, 5, 1] <- 1 L[6, 6, 2] <- 1 fish_data <- data.frame(\"mvmt\" = c(1, 1)) fwd_bck(D = 10, h = h, L = L, land = land, fish_data = fish_data) #> , , 1 #>  #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    0    0    0    0    0    0    0    0    0     0 #>  [2,]    0    0    0    0    0    0    0    0    0     0 #>  [3,]    0    0    0    0    0    0    0    0    0     0 #>  [4,]    0    0    0    0    0    0    0    0    0     0 #>  [5,]    0    0    0    0    1    0    0    0    0     0 #>  [6,]    0    0    0    0    0    0    0    0    0     0 #>  [7,]    0    0    0    0    0    0    0    0    0     0 #>  [8,]    0    0    0    0    0    0    0    0    0     0 #>  [9,]    0    0    0    0    0    0    0    0    0     0 #> [10,]    0    0    0    0    0    0    0    0    0     0 #>  #> , , 2 #>  #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    0    0    0    0    0    0    0    0    0     0 #>  [2,]    0    0    0    0    0    0    0    0    0     0 #>  [3,]    0    0    0    0    0    0    0    0    0     0 #>  [4,]    0    0    0    0    0    0    0    0    0     0 #>  [5,]    0    0    0    0    0    0    0    0    0     0 #>  [6,]    0    0    0    0    0    1    0    0    0     0 #>  [7,]    0    0    0    0    0    0    0    0    0     0 #>  [8,]    0    0    0    0    0    0    0    0    0     0 #>  [9,]    0    0    0    0    0    0    0    0    0     0 #> [10,]    0    0    0    0    0    0    0    0    0     0 #>"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""}]
